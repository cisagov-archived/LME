---
# Dashboard setup tasks

- name: Read lme-environment.env file
  ansible.builtin.slurp:
    src: /opt/lme/lme-environment.env
  register: lme_env_content
  become: yes

- name: Set environment variables
  ansible.builtin.set_fact:
    env_dict: "{{ env_dict | default({}) | combine({ item.split('=', 1)[0]: item.split('=', 1)[1] }) }}"
  loop: "{{ (lme_env_content['content'] | b64decode).split('\n') }}"
  when: item != '' and not item.startswith('#')

- name: Set playbook variables
  ansible.builtin.set_fact:
    local_kbn_url: "{{ env_dict.LOCAL_KBN_URL | default('') }}"
    elastic_username: "{{ env_dict.ELASTIC_USERNAME | default('') }}"
    elastic_password: "{{ global_secrets.elastic | default('') }}"

- name: Expand clone directory path
  set_fact:
    absolute_clone_dir: "{{ clone_directory | expanduser }}"

- name: Check if source dashboards directory exists
  stat:
    path: "{{ absolute_clone_dir }}/dashboards"
  register: source_dashboard_dir

- name: Fail if source directory doesn't exist
  fail:
    msg: "Source dashboards directory {{ source_dashboard_dir.stat.path }} doesn't exist"
  when: not source_dashboard_dir.stat.exists

- name: Ensure /opt/lme/dashboards directory exists
  file:
    path: /opt/lme/dashboards
    state: directory
    owner: "{{ install_user }}"
    group: "{{ install_user }}"
    mode: '0750'
  become: yes

- name: Ensure /opt/lme/dashboards/elastic directory exists
  file:
    path: /opt/lme/dashboards/elastic
    state: directory
    owner: "{{ install_user }}"
    group: "{{ install_user }}"
    mode: '0750'
  become: yes

- name: Ensure /opt/lme/dashboards/wazuh directory exists
  file:
    path: /opt/lme/dashboards/wazuh
    state: directory
    owner: "{{ install_user }}"
    group: "{{ install_user }}"
    mode: '0750'
  become: yes

- name: Copy Elastic dashboards files
  copy:
    src: "{{ source_dashboard_dir.stat.path }}/elastic/"
    dest: /opt/lme/dashboards/elastic/
    owner: "{{ install_user }}"
    group: "{{ install_user }}"
    mode: '0644'
  become: yes

- name: Copy Wazuh dashboards files
  copy:
    src: "{{ source_dashboard_dir.stat.path }}/wazuh/"
    dest: /opt/lme/dashboards/wazuh/
    owner: "{{ install_user }}"
    group: "{{ install_user }}"
    mode: '0644'
  become: yes

- name: Debug - List copied Elastic dashboards
  find:
    paths: "/opt/lme/dashboards/elastic"
    patterns: "*.ndjson"
  register: elastic_dashboards_debug
  become: yes

# Verify Kibana can connect to Elasticsearch with retry and restart
- name: Set retry variables
  set_fact:
    max_retries: 3
    current_retry: 0
  vars:
    current_retry: "{{ current_retry | int }}"

- name: Verify Kibana connection to Elasticsearch with retry loop
  block:
    - name: Attempt to verify Kibana connection
      uri:
        url: "{{ local_kbn_url }}/api/status"
        method: GET
        user: "{{ elastic_username }}"
        password: "{{ elastic_password }}"
        force_basic_auth: yes
        validate_certs: no
        status_code: 200
      register: kibana_status
      until: >
        kibana_status.status == 200 and 
        kibana_status.json.status.overall.level == "available" and
        kibana_status.json.status.core.elasticsearch.level == "available"
      retries: 10
      delay: 20
      no_log: "{{ not debug_mode }}"

    - name: Debug Kibana status
      debug:
        msg: "Kibana status: {{ kibana_status.json }}"
      when: debug_mode | bool

    - name: Check if connection failed
      set_fact:
        connection_failed: "{{ kibana_status.status != 200 or kibana_status.json.status.core.elasticsearch.level != 'available' }}"
      when: kibana_status.status is defined

  rescue:
    - name: Increment retry counter
      set_fact:
        current_retry: "{{ (current_retry | int) + 1 }}"

    - name: Debug retry attempt
      debug:
        msg: "Connection attempt {{ current_retry }} failed. Restarting Kibana service..."
      when: debug_mode | bool

    - name: Restart Kibana service
      systemd:
        name: lme-kibana.service
        state: restarted
      become: yes

    - name: Wait for Kibana to be available after restart
      uri:
        url: "{{ local_kbn_url }}/api/status"
        method: GET
        user: "{{ elastic_username }}"
        password: "{{ elastic_password }}"
        force_basic_auth: yes
        validate_certs: no
        status_code: 200
      register: kibana_status_after_restart
      until: >
        kibana_status_after_restart.status == 200 and 
        kibana_status_after_restart.json.status.overall.level == "available" and
        kibana_status_after_restart.json.status.core.elasticsearch.level == "available"
      retries: 20
      delay: 60
      no_log: "{{ not debug_mode }}"

    - name: Fail if max retries exceeded
      fail:
        msg: "Failed to establish Kibana connection to Elasticsearch after {{ max_retries }} attempts with service restarts"
      when: (current_retry | int) >= max_retries

    - name: Retry connection check
      include_tasks: main.yml
      when: (current_retry | int) < max_retries

# Elastic Dashboards
- name: Get list of Elastic dashboards
  find:
    paths: "/opt/lme/dashboards/elastic"
    patterns: "*.ndjson"
  register: elastic_dashboards
  become: yes

- name: Debug - Show Elastic dashboard paths before slurp
  debug:
    msg: "About to read files: {{ elastic_dashboards.files | map(attribute='path') | list }}"
  when: debug_mode | bool

- name: Debug - List directory contents
  command: ls -la /opt/lme/dashboards/elastic/
  register: dir_list
  when: debug_mode | bool
  become: yes

- name: Debug - Show directory contents
  debug:
    msg: "Directory contents: {{ dir_list.stdout_lines }}"
  when: debug_mode | bool
  become: yes

- name: Read Elastic dashboard files
  ansible.builtin.slurp:
    src: "{{ elastic_dashboards.files[0].path }}"
  register: elastic_dashboard_content
  become: yes

- name: Upload Elastic dashboards to Kibana
  uri:
    url: "{{ local_kbn_url }}/api/saved_objects/_import?overwrite=true"
    method: POST
    user: "{{ elastic_username }}"
    password: "{{ elastic_password }}"
    force_basic_auth: yes
    validate_certs: no
    headers:
      kbn-xsrf: "true"
    body_format: form-multipart
    body:
      file:
        filename: "{{ elastic_dashboards.files[0].path | basename }}"
        content: "{{ elastic_dashboard_content.content | b64decode }}"
        mime_type: "application/json"
    timeout: 120
  no_log: "{{ not debug_mode }}"
  register: elastic_upload_result
  retries: 3
  delay: 10
  until: elastic_upload_result.status == 200
  ignore_errors: yes

- name: Debug Elastic dashboard upload results
  debug:
    var: elastic_upload_result
  when: debug_mode | bool

# Wazuh Dashboards
- name: Get list of Wazuh dashboards
  find:
    paths: "/opt/lme/dashboards/wazuh"
    patterns: "*.ndjson"
  register: wazuh_dashboards
  become: yes

- name: Read Wazuh dashboard files
  ansible.builtin.slurp:
    src: "{{ wazuh_dashboards.files[0].path }}"
  register: wazuh_dashboard_content
  become: yes

- name: Upload Wazuh dashboards to Kibana
  uri:
    url: "{{ local_kbn_url }}/api/saved_objects/_import?overwrite=true"
    method: POST
    user: "{{ elastic_username }}"
    password: "{{ elastic_password }}"
    force_basic_auth: yes
    validate_certs: no
    headers:
      kbn-xsrf: "true"
    body_format: form-multipart
    body:
      file:
        filename: "{{ wazuh_dashboards.files[0].path | basename }}"
        content: "{{ wazuh_dashboard_content.content | b64decode }}"
        mime_type: "application/json"
    timeout: 120
  no_log: "{{ not debug_mode }}"
  register: wazuh_upload_result
  retries: 3
  delay: 10
  until: wazuh_upload_result.status == 200
  ignore_errors: yes

- name: Debug Wazuh dashboard upload results
  debug:
    var: wazuh_upload_result
  when: debug_mode | bool 